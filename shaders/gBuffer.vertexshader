layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in uint vertexColor; // NOTE(Jesse): 16-bit
layout(location = 3) in vec2 in_TransEmiss;

out vec3 vertexP_worldspace;
out vec3 vertexN_worldspace;
out vec3 MaterialColor;
out vec2 TransEmiss;

uniform vec3 OffsetOfWorldCenterToGrid;
uniform vec3 CameraToWorld;
uniform mat4 ModelMatrix;
uniform mat4 ViewProjection;

// TODO(Jesse): Pass in a m3 here.  I didn't have an m3 struct, so I didn't
// bother, but I should do that at some point..
//
uniform mat4 NormalMatrix; // Inverted and transposed ModelMatrix.

void main()
{
  MaterialColor = V3(float(vertexColor)/float(256));
  TransEmiss = in_TransEmiss;

  v4 ModelVertex = ModelMatrix*vec4(vertexPosition_modelspace, 1);

  vertexP_worldspace = ModelVertex.xyz;
  vertexN_worldspace = mat3(NormalMatrix) * vertexNormal_modelspace;

  gl_Position =  ViewProjection * ModelVertex;
}

