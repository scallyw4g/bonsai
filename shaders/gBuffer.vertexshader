
layout(location = VERTEX_POSITION_LAYOUT_LOCATION)    in vec3 vertexPosition_modelspace; // NOTE(Jesse): 8-bit
layout(location = VERTEX_NORMAL_LAYOUT_LOCATION)      in vec3 vertexNormal_modelspace;
layout(location = VERTEX_COLOR_LAYOUT_LOCATION)       in uint ColorIndex; // NOTE(Jesse): 16-bit
layout(location = VERTEX_TRANS_EMISS_LAYOUT_LOCATION) in ivec2 in_TransEmiss; // NOTE(Jesse): 8-bit

out vec3 vertexP_worldspace;
out vec3 vertexN_worldspace;
out vec3 MaterialColor;
out vec2 TransEmiss;

uniform vec3 OffsetOfWorldCenterToGrid;
uniform vec3 CameraToWorld;
uniform mat4 ModelMatrix;
uniform mat4 ViewProjection;

uniform sampler2D ColorPalette;



// TODO(Jesse): Pass in a m3 here.  I didn't have an m3 struct, so I didn't
// bother, but I should do that at some point..
//
uniform mat4 NormalMatrix; // Inverted and transposed ModelMatrix.

void main()
{
  /* uint Transparency = uint((vertexMaterial>>16) & 0xFFu); */
  /* uint Emission     = uint((vertexMaterial>>8)  & 0xFFu); */
  /* uint ColorIndex   = uint((vertexMaterial)     & 0xFFFFu); */
  int Transparency = in_TransEmiss.x;
  int Emission = in_TransEmiss.y;

  MaterialColor = texelFetch(ColorPalette, ivec2(ColorIndex, 0), 0).rgb;
  /* MaterialColor = texelFetch(ColorPalette, ivec2(5, 0), 0).rgb; */
  TransEmiss = V2(float(Transparency)/255.f, float(Emission)/(255.f/RENDERER_MAX_LIGHT_EMISSION_VALUE));
  /* TransEmiss = V2(0.5f, 0.5f); */

  v4 ModelVertex = ModelMatrix*vec4(V3(vertexPosition_modelspace), 1);

  vertexP_worldspace = ModelVertex.xyz;
  vertexN_worldspace = mat3(NormalMatrix) * V3(vertexNormal_modelspace);

  gl_Position =  ViewProjection * ModelVertex;
}

