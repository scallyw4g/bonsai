
in vec3 WorldP;
in vec3 Normal;
in vec3 MaterialColor;
in vec2 TransEmiss;

uniform sampler2D gBufferDepthTexture;

uniform bool BravoilMyersOIT;
uniform bool BravoilMcGuireOIT;

uniform v2 ApplicationResolution;

layout (location = 0) out vec4 ColorAccumulation;
layout (location = 1) out vec2 Count;


float Far = 5000.f;
float Near = 0.25f;


float zDivPow(float z, float denom, float power)
{
  return pow(z/denom, power);
}

float Eq7(float LinearDepth, float Alpha)
{
  float absZ = abs(LinearDepth);
  float denom = 10e-5 + zDivPow(absZ, 5.f, 2.f) + zDivPow(absZ, 200.f, 6.f);
  return Alpha * ( max(10e-2, min(30e3, 10.f / denom )) );
}

float Eq8(float LinearDepth, float Alpha)
{
  float absZ = abs(LinearDepth);
  float denom = 10e-5 + zDivPow(absZ, 10.f, 3.f) + zDivPow(absZ, 200.f, 6.f);
  return Alpha * ( max(10e-2, min(30e3, 10.f / denom )) );
}

float Eq9(float LinearDepth, float Alpha)
{
  float absZ = abs(LinearDepth);
  float denom = 10e-5 + zDivPow(absZ, 200.f, 4.f);
  return Alpha * ( max(10e-2, min(30e3, 0.03f / denom )) );
}


float Cube(float A)
{
  return A*A*A;
}

// Eq11
float RandomFuncFromPaper(float FragDepth)
{
  float Result = ((Near*Far) / FragDepth-Far) / (Near-Far);
  return Result;
}

float Eq10(float Depth, float Alpha)
{
  float absZ = abs(Depth);
  float denom = 10e-5 + zDivPow(absZ, 200.f, 4.f);
  return Alpha * ( max(10e-2, 30e3 * Cube(1.f-RandomFuncFromPaper(absZ)) ));
}

void main()
{
  // TODO(Jesse): Is this actually correct? I  would think we'd want the screen
  // dimension here, but this is what we were doing before so I'm going to leave it.
  v2 UV = gl_FragCoord.xy / ApplicationResolution;
  float gBufferDepth = texture(gBufferDepthTexture, UV).r;
  float FragDepth = gl_FragCoord.z;

  float Alpha    = TransEmiss.x;
  float Emission = TransEmiss.y;

  /* ColorAccumulation.r = Alpha; */
  /* Count.r = Emission; */
  /* return; */

  /* ColorAccumulation = v4(Alpha, Emission, 0.f, 1.f); */
  /* ColorAccumulation = v4(WorldP, 1.f); */
  /* ColorAccumulation = v4(Normal, 1.f); */
  /* ColorAccumulation = v4(MaterialColor, 1.f); */
  /* Count = V2(Alpha); */
  /* return; */

  if (FragDepth < gBufferDepth)
  {
    if (BravoilMyersOIT)
    {
      ColorAccumulation = v4(MaterialColor * Alpha, Alpha);
      Count = V2(1.f);
    }

    if (BravoilMcGuireOIT)
    {
      /* ColorAccumulation = MaterialColor * Eq7(Linearize(FragDepth, 500.f, 0.1f), Alpha); */
      /* ColorAccumulation = MaterialColor * Eq7(FragDepth, Alpha); */
      /* ColorAccumulation.rgb = MaterialColor.rgb * Linearize(FragDepth, 800.f, 0.1f); */

      float DepthAtten = Linearize(FragDepth, 1000.f, 0.1f);
      /* float DepthAtten = Eq7(Linearize(FragDepth, 500.f, 0.1f), Alpha); */
      /* float DepthAtten = Eq7(FragDepth, Alpha); */

      float AttenuatedAlpha = Alpha * DepthAtten;

      ColorAccumulation.rgb = MaterialColor * Alpha;
      /* ColorAccumulation.rgb = MaterialColor.rgb * AttenuatedAlpha; */
      ColorAccumulation.a   = AttenuatedAlpha;

      /* ColorAccumulation = MaterialColor * FragDepth; */
      /* ColorAccumulation = MaterialColor * Eq10(FragDepth, Alpha); */

      /* Count = -v4(1.f-Alpha); */
      /* Count = V4(0.f, 0.f, 0.f, Alpha); */
      /* Count = V4(0.f, 0.f, 0.f, Alpha); */
      Count.r = Alpha;
      Count.g = Emission * Alpha;
      /* Count = V4(Alpha, Emission, 0.f 0.f); */
      /* Count = -V4(ColorAccumulation.a); */
      /* Count = -V4(1.f-(Alpha*DepthAtten)); */
    }
  }
}
