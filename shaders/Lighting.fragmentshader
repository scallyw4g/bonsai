
in vec2 gBufferUV;
layout (location = 0) out vec4 out_LightColor;
/* layout (location = 1) out vec3 BloomColor; */

uniform sampler2D gColor;
uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gDepth;
uniform sampler2D shadowMap;
uniform sampler2D Ssao;

uniform s32 LightCount;
uniform r32 LightIndexToUV;
uniform sampler2D LightColors;
uniform sampler2D LightPositions;

uniform sampler2D TransparencyAccum;
uniform sampler2D TransparencyCount;
uniform bool BravoilMyersOIT;
uniform bool BravoilMcGuireOIT;

uniform mat4 InverseViewMatrix;
uniform mat4 InverseProjectionMatrix;
uniform mat4 ShadowMVP;

uniform vec3 SunPosition;
uniform vec3 SunColor;
uniform vec3 CameraP;

uniform r32  FogPower;
uniform vec3 FogColor;


uniform bool UseSsao;
uniform bool UseShadowMapping;
uniform bool UseLightingBloom;

uniform v2 ApplicationResolution;
uniform v2 ShadowMapResolution;

int AoBlurSize = 4; // size of AO noise texture
float BlurredAO = 0.0f;


// NOTE(Jesse): Better shader noise function for when I need it : https://www.shadertoy.com/view/4djSRW

// NOTE(Jesse): These are done, leaving here for posterity for a bit.
// DONE(Jesse): Tune the sun color & ambient light color to be orange/teal
// DONE(Jesse): Tune the sun color & ambient light intensities to be 10:1
// DONE(Jesse): Add back-lighting, which is a light from the opposite direciton of the sun.  
// DONE(Jesse): Don't modulate key-light by SSAO
//
// https://www.youtube.com/watch?v=-pdSjBPH3zM
//

// SunIntensity : 1.00f Full Sun
// SunIntensity : 0.05f Dusk
// SunIntensity : 0.005f Moonlight

/* float SunIntensity = 0.0005f;
/* float SunIntensity = 0.005f; */
/* float SunIntensity = 0.05f; */
float SunIntensity = 0.5f;
/* float SunIntensity = 1.0f; */

// Tuning
  float gamma = 2.2f;
  float materialShininess = 2.0f;
//


vec3 SpecLightingCalc(float AttenuationFactor, vec3 DiffuseColor, vec3 FragToLight, vec3 FragWorldP, vec3 FragNormal, vec3 CameraP)
{
  vec3 reflectionVector = reflect(FragToLight, FragNormal);
  vec3 FragToCamera = normalize(FragWorldP - CameraP);
  float cosAngle = max(0.0, dot(FragToCamera, reflectionVector));
  float SpecularPower = pow(cosAngle, materialShininess);
  vec3 SpecularLight = DiffuseColor * SpecularPower;

  return SpecularLight;
}

vec3 LightingCalc(float AttenuationFactor, vec3 LightColor, vec3 FragToLight, vec3 FragNormal, vec3 CameraP)
{
  float LightCosTheta = clamp( dot( FragNormal, FragToLight), 0.0f, 1.0f);
  vec3 DirectLight = LightColor * LightCosTheta * AttenuationFactor;
  return DirectLight;
}


void main()
{
  vec2 gBufferTextureDim = ApplicationResolution;
  ivec2 texelCoord = ivec2(gBufferUV*gBufferTextureDim);

  /* vec4 FragWorldP = texelFetch(gPosition, texelCoord, 0); */

  /* f32 Depth = texelFetch(gDepth, texelCoord, 0).r; */
  f32 Depth = texture(gDepth, gBufferUV).r; // NOTE(Jesse): Nonlinear

#if 0
  /* f32 DepthNonlinear = Linearize(DepthNonlinear, 5000.f, 0.1f); // 1.f at far clip plane, 0.f at near clip */

  f32 ClipZ = (Depth*2.f) - 1.f;
  v2 ClipXY = (gBufferUV*2.f)-1.f;

  v4 ClipP = V4(ClipXY.x, ClipXY.y, ClipZ, 1.f); // Correct
  v4 ViewP = InverseProjectionMatrix * ClipP;

  ViewP /= ViewP.w;

  v4 WorldP = InverseViewMatrix * ViewP;
  v4 FragPosition = WorldP;
#endif

  v3 FragWorldP = WorldPositionFromNonlinearDepth(Depth, gBufferUV, InverseProjectionMatrix, InverseViewMatrix);

  /* out_LightColor.r = Depth; */
  /* out_LightColor.r = abs(ClipZ); */
  /* out_LightColor.xy = abs(ClipXY); */
  /* out_LightColor = abs(ClipP); */

  /* out_LightColor = abs(InverseProjectionMatrix[0]); */
  /* out_LightColor = abs(InverseProjectionMatrix[1]); */
  /* out_LightColor = abs(ViewP); */
  /* out_LightColor = abs(WorldP); */
  /* out_LightColor = FragWorldP; */
  /* out_LightColor.a = 1.f; */
  /* return; */


  vec4 TransAccum = texture(TransparencyAccum, gBufferUV);
  float TransAccumCount = texture(TransparencyCount, gBufferUV).r;
  float TransAccumEmission = texture(TransparencyCount, gBufferUV).g;

  vec3 AmbientLightContrib = SunColor*0.06f;
  vec3 KeyLightContrib     = V3(0.f);
  vec3 BackLightContrib    = V3(0.f);
  vec3 PointLightsContrib  = V3(0.f);

  vec3 CameraToFrag = normalize(FragWorldP - CameraP); // TODO(Jesse): Pass this to the lighting calc that needs it

  vec4 gColorTexel = texelFetch(gColor, texelCoord, 0);

  vec3 Diffuse = gColorTexel.rgb;
  /* float Emission = gColorTexel.a; */

  /* Diffuse *= Emission; */

  vec3 FragNormal = texelFetch(gNormal, texelCoord, 0).rgb;
  /* vec3 FragNormal   = texture(gNormal, gBufferUV).rgb; */

  vec3 ShadowVisibility = vec3(1.0f);

  vec3 TotalLight = vec3(0.f);
  /* r32 DiscardThresh = f32_MAX; */
  /* if (FragWorldP.x == DiscardThresh) */
  /* { */
  /*   TotalLight = vec3(1.f); */
  /* } */
  /* else */
  {

  /* out_LightColor = FragWorldP; */
  /* return; */


    /* float Emission = clamp(0.f, 1.f, texelFetch(gColor, texelCoord, 0).a); */

    {
      vec3 FragToLight = normalize(SunPosition);
      vec3 LightToFrag = -FragToLight;

      float LightAtt = SunIntensity;
      KeyLightContrib = LightingCalc(LightAtt, SunColor, FragToLight, FragNormal, CameraP);
      /* KeyLightContrib += SpecLightingCalc(LightAtt, Diffuse, FragToLight, FragWorldP, FragNormal, CameraP); */

      BackLightContrib = LightingCalc(LightAtt, 0.15f*SunColor, LightToFrag, FragNormal, CameraP);
    }



    for ( s32 LightIndex = 0; LightIndex < LightCount; ++LightIndex )
    {
      ivec2 LightUV = ivec2(LightIndex, 0);

      vec3 LightPosition = texelFetch(LightPositions, LightUV, 0).rgb;
      vec3 LightColor    = texelFetch(LightColors, LightUV, 0).rgb;

      vec3 FragToLight = normalize(LightPosition - FragWorldP);

      float LightCosTheta = clamp( dot( FragNormal, FragToLight), 0.0f, 1.0f);

      float Distance = distance(FragWorldP, LightPosition);

      float LightAtt = 0.f;
      if (Distance > 0) { LightAtt = 1.0f/(Distance*Distance); }

      vec3 reflectionVector = reflect(FragToLight, FragNormal);
      vec3 CameraToFrag = normalize(FragWorldP - CameraP);
      float cosAngle = max(0.f, dot(CameraToFrag, reflectionVector));
      float SpecularPower = pow(cosAngle, materialShininess);

      vec3 DirectLight = Diffuse * LightColor * LightCosTheta * LightAtt;
      vec3 SpecularLight = vec3(0.f);

      if (LightCosTheta > 0.f) SpecularLight = LightColor * SpecularPower * LightAtt;

      PointLightsContrib += DirectLight + SpecularLight;
      PointLightsContrib += SpecularLight;
    }

    if (UseSsao)
    {
      vec2 texelSize = 1.0 / vec2(textureSize(Ssao, 0));
      float AccumAO = 0.0;

      vec2 hlim = vec2(float(-AoBlurSize) * 0.5 + 0.5);

      for (int i = 0; i < AoBlurSize; ++i) {
         for (int j = 0; j < AoBlurSize; ++j) {
            vec2 TexOffset = (hlim + vec2(float(i), float(j))) * texelSize;
            AccumAO += texture(Ssao, gBufferUV + TexOffset).r;
         }
      }

      BlurredAO = AccumAO / float(AoBlurSize * AoBlurSize);
    }
    else
    {
      BlurredAO = 1.0f;
    }


    vec3 sampleVis = vec3(1.0f/5.f);
    /* vec3 sampleVis = vec3(1.f/7.f); */

    if (UseShadowMapping)
    {
      /*
       *  Shadow Mapping
       */
      f32 LinearDepth = Linearize(Depth, 5000.f, 0.1f);
      float acneBias = 0.045f * LinearDepth; // Fix acne

      vec4 FragPShadowSpace = ShadowMVP * vec4(FragWorldP, 1.f);
      float FragDepth = FragPShadowSpace.z - acneBias;
      /* out_LightColor = vec4(FragDepth, FragDepth, FragDepth, 1.f); */
      /* out_LightColor = FragPShadowSpace; */
      /* return; */


      v2 ShadowMapUVStep = vec2(1.f)/ShadowMapResolution;

      float ShadowSampleDepth = texture(shadowMap, FragPShadowSpace.xy ).x + acneBias;
      if ( FragDepth > ShadowSampleDepth ) { ShadowVisibility -= vec3(1.f); }

      // NOTE(Jesse): This is misguided.  The correct thing to do is to write
      // shadow information to a buffer, then sample that buffer using a box filter
      // (or some other blur function).  The reason to do it that way instead of
      // directly here is that for each sample you take here, you'd have to
      // recompute the actual shadow map value at the sample pos, which would be
      // much too expensive even at small sample rates.
      //
      // I'm going to leave this here, but it causes flashing when the sun rotates
      // such that the number of samples this hits true branches for change for the
      // whole scene.
      //
      // Might be fine if the sun location was a fixed point, but that seems lame.
      //
#if 0
      // TODO(Jesse): Does this produce better results using texelFetch?
      vec2 Mapped = vec2(FragPShadowSpace.xy + vec2(ShadowMapUVStep.x, 0.f));
      ShadowSampleDepth = texture(shadowMap, Mapped).x + acneBias;
      if ( FragDepth > ShadowSampleDepth ) { ShadowVisibility -= sampleVis; }

      Mapped = vec2(FragPShadowSpace.xy + vec2(-ShadowMapUVStep.x, 0.f));
      ShadowSampleDepth = texture(shadowMap, Mapped).x + acneBias;
      if ( FragDepth > ShadowSampleDepth ) { ShadowVisibility -= sampleVis; }

      Mapped = vec2(FragPShadowSpace.xy + vec2(0.f, ShadowMapUVStep.y));
      ShadowSampleDepth = texture(shadowMap, Mapped).x + acneBias;
      if ( FragDepth > ShadowSampleDepth ) { ShadowVisibility -= sampleVis; }

      Mapped = vec2(FragPShadowSpace.xy + vec2(0.f, -ShadowMapUVStep.y));
      ShadowSampleDepth = texture(shadowMap, Mapped).x + acneBias;
      if ( FragDepth > ShadowSampleDepth ) { ShadowVisibility -= sampleVis; }
#endif

      /* out_LightColor = vec4(vec3(FragDepth < ShadowSampleDepth ), 1.f); */
      /* return; */

    }

    /* ShadowVisibility = max(ShadowVisibility, vec3(SunIntensity)); */
    /* out_LightColor = vec4(ShadowVisibility, 1.f); */
    /* return; */

#if 1
    /*
     *  Fog
     */
    // TODO(Jesse): Can do squared?
    float DistanceToFrag = distance(CameraP, FragWorldP);
    float MaxFogDist = 200000.f;

    float FogContrib = clamp( DistanceToFrag / MaxFogDist, 0.f, 1.f);
    v3 Fog = FogContrib * FogColor * FogPower;
#else
    v3 Fog = V3(0);
#endif

    /*
     *  Tone-mapping && gamma correction
     */

    TotalLight = (Diffuse*KeyLightContrib*ShadowVisibility) +
                 (Diffuse*AmbientLightContrib*BlurredAO) +
                 (Diffuse*BackLightContrib*BlurredAO) +
                 (PointLightsContrib*BlurredAO) +
                 Fog;
                 /* Emission * Diffuse + */

    /* if (Emission > 1.f) */
    /* { */
    /*   TotalLight += Emission*Diffuse; */
    /* } */

    /* vec3 TotalLight = (KeyLightContrib) + */
    /*                   (PointLightsContrib) + */
    /*                   (BlurredAO*BackLightContrib) + */
    /*                   Fog; */

  }

  float Shine = 0.f;
  /* Shine = clamp(pow(dot(SunPosition, CameraToFrag), 2.f), 0.f, 1.f); */


  /* out_LightColor = vec4(Diffuse, 1.f); */
  /* out_LightColor = vec4(abs(FragNormal), 1.f); */
  /* out_LightColor = vec4(KeyLightContrib*10.f, 1.f); */

  /* out_LightColor = vec4( (KeyLightContrib*ShadowVisibility*100.f), 1.f); */
  /* out_LightColor = vec4( (ShadowVisibility), 1.f); */
  /* out_LightColor = vec4(FogContrib, FogContrib, FogContrib, 1.f) * vec4(FogColor, 1.f); */
  /* out_LightColor = vec4(out_LightColor, 1.f); */
  /* out_LightColor = vec4(1.f, 0.f, 0.f, 1.f); */
  /* out_LightColor = vec4(0.f); */
  v3 TransparencyContrib = v3(0.f, 0.f, 0.f);

  if (BravoilMyersOIT)
  {
    /* TransparencyContrib = BravoilMyersWeightedAverage(TransAccum, TransAccumCount); */

    float Count = max(1.f, TransAccumCount);

    // Have to clamp because this is > 1.f for emissive surfaces, which breaks the following equation
    float Alpha = clamp(TransAccum.a, 0.f, 1.f);

    v3 ColorResult = TransAccum.rgb/max(TransAccum.a, 0.00001f);
    float AlphaResult = pow(max(0.0, 1.0-(Alpha/Count)), Count);

    TransparencyContrib = v3(ColorResult * AlphaResult);
    /* out_LightColor = vec4(TotalLight+TransparencyContrib.rgb, 1.f); */
    /* out_LightColor = v4(TotalLight, 1.f); */
  }

  if (BravoilMcGuireOIT)
  {
    float Coverage = clamp(TransAccumCount, 0.f, 1.f);
    /* float Coverage = Revealage; */
    TransparencyContrib = (TransAccum.rgb / clamp(TransAccum.a, 1e-4, 5e4));
    /* TransparencyContrib = (TransAccum.rgb / clamp(TransAccum.a, 1e-4, 5e4)) * Coverage; */

    float LightTransmission = length(KeyLightContrib + BackLightContrib + PointLightsContrib + AmbientLightContrib);
    float LightEmission = TransAccumEmission;

    /* out_LightColor = V4(TransAccumEmission, 0.f, 0.f, 1.f); */
    /* out_LightColor = V4(LightTransmission, 0.f, 0.f, 1.f); */
    /* out_LightColor = V4(LightEmission, 0.f, 0.f, 1.f); */
    /* out_LightColor = V4(max(LightTransmission, LightEmission), 0.f, 0.f, 1.f); */
    /* return; */

    TransparencyContrib *= V3(LightTransmission + LightEmission);
    /* TransparencyContrib *= LightEmission; */

    /* out_LightColor = vec4( TotalLight + TransparencyContrib*LightTransmission, 1.f); */
    /* out_LightColor = vec4(Revealage, 0.f, 0.f, 1.f); */
    /* out_LightColor = vec4( TotalLight + ColorResult*Coverage, 1.f); */
    /* out_LightColor = vec4( TotalLight + ColorResult*Coverage, 1.f); */
  }

  out_LightColor = V4(TotalLight + TransparencyContrib, 1.f);
  /* out_LightColor = V4(Emission, 0.f, 0.f, 1.f); */
  /* return; */


  /* if (UseLightingBloom) { BloomColor = TotalLight + TransparencyContrib.rgb; } */

  /* else { BloomColor = vec3(0.0f, 0.0f, 0.0f); } */

  /* if (UseLightingBloom) out_LightColor.r = 1.f; */
  /* if (UseShadowMapping) out_LightColor.b = 1.f; */
  /* if (UseSsao) out_LightColor.g = 1.f; */

  /* out_LightColor = vec4(Emission, Emission, Emission, 1.f);; */
  /* BloomColor = vec3(Emission, Emission, Emission); */
}
