
in vec2 ScreenUV;
out vec4 OutColor;


/* uniform sampler2D gColor; */
uniform sampler2D gPosition;
uniform sampler2D gNormal;

uniform sampler2D BloomTex;
uniform sampler2D LuminanceTex;
/* uniform sampler2D shadowMap; */
/* uniform sampler2D Ssao; */

uniform mat4 ShadowMVP;
uniform vec3 CameraP;

uniform bool UseLightingBloom;

uniform sampler2D TransparencyAccum;
uniform sampler2D TransparencyCount;
uniform bool BravoilMyersOIT;
uniform bool BravoilMcGuireOIT;

uniform float Exposure;

uniform int ToneMappingType;

uniform v2 ApplicationResolution;
// uniform v2 LuminanceMapResolution;



// Minimal implementation of Troy Sobotka's AgX based on
// 
// https://github.com/sobotka/AgX
//
// using a 6th order polynomial approximation instead
// of the more complex sigmoid function or lookup table.
//
// Some more details here: 
// https://iolite-engine.com/blog_posts/minimal_agx_implementation
//
// Changelog
// ---------
// - Added "full round trip" based on Troy's feedback (https://www.shadertoy.com/view/mdcSDH)

// Mean error^2: 3.6705141e-06
vec3 agxDefaultContrastApprox(vec3 x) {
  vec3 x2 = x * x;
  vec3 x4 = x2 * x2;

  return + 15.5     * x4 * x2
         - 40.14    * x4 * x
         + 31.96    * x4
         - 6.868    * x2 * x
         + 0.4298   * x2
         + 0.1191   * x
         - 0.00232;
}

vec3 agx(vec3 val) {
  const mat3 agx_mat = mat3(
    0.842479062253094, 0.0423282422610123, 0.0423756549057051,
    0.0784335999999992,  0.878468636469772,  0.0784336,
    0.0792237451477643, 0.0791661274605434, 0.879142973793104);

  const float min_ev = -12.47393f;
  const float max_ev = 4.026069f;

  // Input transform
  val = agx_mat * val;

  // Log2 space encoding
  val = clamp(log2(val), min_ev, max_ev);
  val = (val - min_ev) / (max_ev - min_ev);

  // Apply sigmoid function approximation
  val = agxDefaultContrastApprox(val);

  return val;
}

vec3 agxEotf(vec3 val) {
  const mat3 agx_mat_inv = mat3(
    1.19687900512017, -0.0528968517574562, -0.0529716355144438,
    -0.0980208811401368, 1.15190312990417, -0.0980434501171241,
    -0.0990297440797205, -0.0989611768448433, 1.15107367264116);

  // Undo input transform
  val = agx_mat_inv * val;

  // sRGB IEC 61966-2-1 2.2 Exponent Reference EOTF Display
  //val = pow(val, vec3(2.2));

  return val;
}

vec3 agxLook(vec3 val) {
  const vec3 lw = vec3(0.2126, 0.7152, 0.0722);
  float luma = dot(val, lw);

  // Default
  vec3 offset = vec3(0.0);
  vec3 slope = vec3(1.0);
  vec3 power = vec3(1.0);
  float sat = 1.0;

  switch (ToneMappingType)
  {
    case 3: {} break;

    case 4:
    {
      // Golden
      slope = vec3(1.0, 0.9, 0.5);
      power = vec3(0.8);
      sat = 0.8;
    } break;

    case 5:
    {
      // Punchy
      slope = vec3(1.0);
      power = vec3(1.15, 1.15, 1.15);
      sat = 1.4;
    } break;
  }

  // ASC CDL
  val = pow(val * slope + offset, power);
  return luma + sat * (val - luma);
}















void main()
{
  vec3 ToneMapped;

  vec2 gBufferTextureDim = ApplicationResolution;
  vec2 gBufferTexelStep = 1.0 / gBufferTextureDim; // TODO(Jesse): Pass this in as a uniform


  vec4 AccumTex      =          texture(TransparencyAccum, ScreenUV);
  f32  AccumCountTex = max(1.f, texture(TransparencyCount, ScreenUV).r);
  vec3 FragNormal    =          texture(gNormal,           ScreenUV).rgb;
  vec3 Lighting      =          texture(LuminanceTex,       ScreenUV).rgb;

  /* OutColor = v4(Lighting*5.f, 1.f); */
  /* return; */

  v3 Bloom = vec3(0.0f, 0.0f, 0.0f);
  if (UseLightingBloom) { Bloom = texture(BloomTex, ScreenUV).rgb; }


  // Super-poor ultra-jank not-good very-bad AA
  //
  // NOTE(Jesse): Unfortunately, this can't go in the lighting shader to save
  // the FragNormal texture lookup here.  Reason being is that we're blending
  // the lit pixel values, which aren't available in the lighting shader (obviously).
  {
    vec3 xNextFragNormal = texture(gNormal, ScreenUV+ vec2(gBufferTexelStep.x, 0) ).rgb;
    if ( abs(dot(FragNormal, xNextFragNormal)) < 0.5f )
    {
      Lighting += texture(LuminanceTex, ScreenUV + vec2(gBufferTexelStep.x, 0) ).rgb;
      Lighting/=2.f;
    }

    vec3 yNextFragNormal = texture(gNormal, ScreenUV+ vec2(0, gBufferTexelStep.y) ).rgb;
    if ( abs(dot(FragNormal, yNextFragNormal)) < 0.5f )
    {
      Lighting += texture(LuminanceTex, ScreenUV + vec2(0, gBufferTexelStep.y) ).rgb;
      Lighting/=2.f;
    }
  }

  vec3 sampleVis = vec3(1.0f/5.f);
  /* vec3 sampleVis = vec3(1.f/7.f); */

  /*
   *  Tone-mapping && gamma correction
   */
  /* vec3 TransparencyRGB = AccumTex.rgb / AccumCountTex; */
  /* float TransparencyA = AccumTex.a / AccumCountTex; */

  v4 TransparencyContrib = v4(0,0,0,0);
  /* if (BravoilMyersOIT) { TransparencyContrib = BravoilMyersWeightedAverage(AccumTex, AccumCountTex); } */
  /* if (BravoilMcGuireOIT) { TransparencyContrib = BravoilMcGuireDepthWeights(AccumTex, AccumCountTex); } */

  vec3 TotalLight = Lighting + TransparencyContrib.rgb;

  if (UseLightingBloom) { TotalLight += 0.25f*Bloom; }

  /* vec3 TotalLight = Lighting + 0.15f*Bloom + (TransparencyContrib.rgb * TransparencyContrib.a); */
  /* vec3 TotalLight = (Diffuse * Lighting) * 2.f; */

  switch (ToneMappingType)
  {
    // Reinhard tone mapping, looks pretty bad
    case 0:
    {
      ToneMapped = TotalLight;
    } break;

    case 1:
    {
      ToneMapped = TotalLight / (TotalLight + vec3(1.0f));
    } break;

    // Not sure what this one is called, but it's a bit better, if a bit washed out.
    //
    // Tone mapping from https://learnopengl.com/Advanced-Lighting/Bloom
    //
    case 2:
    {
      ToneMapped = vec3(1.0) - exp(-TotalLight * Exposure);
    } break;

    //
    // AGX tone mapping
    //
    // This supposedly closely emulates the actual color that gets recorded by
    // .. some .. film on ahlhlhl
    // https://github.com/EaryChow/AgX
    // https://www.shadertoy.com/view/cd3XWr
    //
    case 3:
    case 4:
    case 5:
    {
      TotalLight = agx(TotalLight);
      TotalLight = agxLook(TotalLight);
      ToneMapped = agxEotf(TotalLight);
    } break;

    default: {ToneMapped = vec3(1,0,0);}
  }

  /* OutColor = vec4(Diffuse, 1.f); */
  /* OutColor = vec4(abs(FragNormal), 1.f); */
  /* OutColor = vec4(KeyLightContrib*10.f, 1.f); */

  /* OutColor = vec4( (KeyLightContrib*ShadowVisibility*100.f), 1.f); */
  /* OutColor = vec4( (ShadowVisibility*100.f), 1.f); */
  /* OutColor = vec4(FogContrib, FogContrib, FogContrib, 1.f) * vec4(FogColor, 1.f); */
  /* OutColor = vec4(ToneMapped, 1.f); */
  /* OutColor = vec4(Lighting, 1.f); */
  /* OutColor = vec4(Bloom, 1.f); */

  // Gamma correction
  float gamma = 2.2f;
  OutColor = vec4(pow(ToneMapped, vec3(1.0f / gamma)), TransparencyContrib.a);
}

