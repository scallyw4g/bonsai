
in v3 vertexP_worldspace;
in v3 vertexN_worldspace;
in v3 MaterialColor;
in v2 TransEmiss;

layout (location = 0) out vec4 gColor;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec4 gPosition;

uniform vec3 OffsetOfWorldCenterToGrid;
uniform vec3 CameraToWorld;
uniform float FarClip;
uniform float NearClip;
uniform float MajorGridDim;

uniform bool DrawMajorGrid;
uniform bool DrawMinorGrid;

float
Linearize(float Depth)
{
  float Result = (2.0 * NearClip) / (FarClip + NearClip - Depth * (FarClip - NearClip));
  return Result;
}

bool IsNear(float A, float B)
{
  float Thresh = 0.02f;
  if ( A < B+Thresh && A > B-Thresh )
  {
    return true;
  }
  return false;
}

float
ModThresh(vec3 In, float Thresh, float ModVal)
{
  /* v3 DimFix = mod(In * 0.01f, ModVal); */
  v3 Modded = mod(In, ModVal);
  v3 DimFix = v3(0.0001f);

  v3 HalfModVal = vec3(0.5f*ModVal);
  v3 PosMapped = abs(Modded - HalfModVal);
  /* v3 FinalMapped = abs(PosMapped- (HalfModVal)); */
  /* v3 FinalMapped = vec3(-1.f)*(PosMapped- (HalfModVal)); */
  v3 MiddleMapped = abs(PosMapped- (HalfModVal));
  v3 FinalMapped = MiddleMapped;
  /* v3 FinalMapped = MiddleMapped-Thresh; */
  /* v3 FinalMapped = PosMapped; */
  /* v3 FinalMapped = abs(MiddleMapped-Thresh); */

  vec3 Contrib = vec3(0);

  for (int DimIndex = 0; DimIndex < 3; ++DimIndex)
  {
    if ( Modded[DimIndex] >= 0.f )
    {
      if (FinalMapped[DimIndex] > DimFix[DimIndex] && FinalMapped[DimIndex] <= Thresh)
        /* Contrib[DimIndex] = FinalMapped[DimIndex]; */
        /* Contrib[DimIndex] = abs(FinalMapped[DimIndex]); */
        Contrib[DimIndex] = abs(FinalMapped[DimIndex]-Thresh);
    }
  }

  /* Contrib = abs(Contrib-Thresh); */

  float Val = max(max(Contrib.x, Contrib.y), Contrib.z);

  float t = MapValueToRange(Val, 0.000f, Thresh, 0.f, 1.f);
  return t;
}

void main()
{
  gPosition.xyz = vertexP_worldspace;
  gPosition.w = Linearize(gl_FragCoord.z); // Depth
  gNormal = vertexN_worldspace;

  vec4 FinalColor = vec4(MaterialColor, 1.f);
  /* gColor = FinalColor; */
  /* return; */

#if 1

  {
    /* vec3 CorrectedPos; */
    /* CorrectedPos.x =  mod(gPosition.x, 8.f); */
    /* CorrectedPos.y =  mod(gPosition.y, 8.f); */
    /* CorrectedPos.z =  mod(gPosition.z, 8.f); */

    /* CorrectedPos.z =  gPosition.z - mod(8.f); */

    /* vec3 CorrectedPos =  gPosition.xyz + (v3(8.f) - mod(CameraToWorld, 8.f)); */
    /* vec3 CorrectedPos =  mod(gPosition.xyz, 8.f) - mod(CameraToWorld, 8.f); */
    vec3 CorrectedPos =  mod(gPosition.xyz + OffsetOfWorldCenterToGrid, MajorGridDim);

    /* FinalColor.rgb = CorrectedPos / v3(8.f); */
    /* FinalColor.rgb += mod(CameraToWorld.xyz, 8.f) / 8.f; */

    /* vec3 CorrectedPos =  gPosition.xyz; */
    vec3 NormFix = vec3(0.99999999f) - abs(gNormal);

    float t1 = 0.f;
    float t2 = 0.f;

    if (DrawMinorGrid)
    {
      t1 = ModThresh(abs(CorrectedPos.xyz)*NormFix, 0.03f, 1.0f);
    }

    if (DrawMajorGrid)
    {
      t2 = ModThresh(abs(CorrectedPos.xyz)*NormFix, 0.05f, MajorGridDim);
    }

    v3 C0 = FinalColor.xyz;
    if (t1 > t2)
    {
      v3 C1 = 2.f*FinalColor.xyz;
      FinalColor.xyz = mix(C0, C1, t1);;
    }
    else
    {
      v3 C1 = 2.f*(1.f-FinalColor.xyz);
      FinalColor.xyz = mix(C0, C1, t2);
    }

    /* FinalColor.x = float(DrawMajorGrid); */
    /* FinalColor.y = float(DrawMinorGrid); */
  }

  /* FinalColor.xyz = abs(gNormal); */
  /* FinalColor.xyz = abs(CorrectedPos.xyz*0.01f); */
  /* FinalColor.xyz = vec3(abs(CorrectedPos.w)); */
#endif

  gColor = FinalColor;
}
