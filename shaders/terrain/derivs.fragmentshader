uniform v3 WorldspaceBasis;
uniform v3 ChunkResolution;

uniform sampler2D InputTex;

in vec2 UV;
out layout(location = 0) vec3 Output;


void main()
{
  f32 CurrentNoiseValue = texelFetch(InputTex, ivec2(gl_FragCoord.xy), 0).a;

  s32 x = s32(floor(gl_FragCoord.x));
  s32 z = s32(floor(gl_FragCoord.y / 66));
  s32 y = s32(floor(gl_FragCoord.y - (z*66)));

  v3 Normal = v3(0.f);

  for ( s32 dz = -1; dz < 2; ++ dz)
  for ( s32 dy = -1; dy < 2; ++ dy)
  for ( s32 dx = -1; dx < 2; ++ dx)
  {
    if (dz == 0 && dy == 0 && dx == 0) continue; // Skip the middle-most voxel

      s32 xCoord = s32(gl_FragCoord.x) + dx;
      s32 yCoord = s32(gl_FragCoord.y) + dy;
      s32 zCoord =                       dz * 66 ;

      f32 Next = texelFetch(InputTex, ivec2(xCoord, yCoord+zCoord), 0).a;
      f32 Diff = Next-(dz*ChunkResolution.z) - Truncate(CurrentNoiseValue);
      // TODO(Jesse): Recompute with a small random variance to the weight if this is 0?
      Normal += V3(dx,dy,dz)*Diff;
  }

  // Invert because we accumulate the value by pointing 'at' the cell we're checking
  //
  Output = -1.f * Normalize(Normal);
}
